/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PublicImport } from './routes/_public'
import { Route as AdminRouteImport } from './routes/admin/route'
import { Route as AdminIndexImport } from './routes/admin/index'
import { Route as PublicIndexImport } from './routes/_public.index'
import { Route as AdminDashboardImport } from './routes/admin/dashboard'
import { Route as AdminProductsIndexImport } from './routes/admin/products/index'
import { Route as PublicLocaleSearchImport } from './routes/_public.$locale.search'
import { Route as PublicLocaleNewsImport } from './routes/_public.$locale.news'
import { Route as PublicLocaleAboutImport } from './routes/_public.$locale.about'
import { Route as PublicLocaleProductsSlugImport } from './routes/_public.$locale.products.$slug'
import { Route as PublicLocaleCategoriesSlugImport } from './routes/_public.$locale.categories.$slug'

// Create/Update Routes

const PublicRoute = PublicImport.update({
  id: '/_public',
  getParentRoute: () => rootRoute,
} as any)

const AdminRouteRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const AdminIndexRoute = AdminIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRouteRoute,
} as any)

const PublicIndexRoute = PublicIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PublicRoute,
} as any)

const AdminDashboardRoute = AdminDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminProductsIndexRoute = AdminProductsIndexImport.update({
  id: '/products/',
  path: '/products/',
  getParentRoute: () => AdminRouteRoute,
} as any)

const PublicLocaleSearchRoute = PublicLocaleSearchImport.update({
  id: '/$locale/search',
  path: '/$locale/search',
  getParentRoute: () => PublicRoute,
} as any)

const PublicLocaleNewsRoute = PublicLocaleNewsImport.update({
  id: '/$locale/news',
  path: '/$locale/news',
  getParentRoute: () => PublicRoute,
} as any)

const PublicLocaleAboutRoute = PublicLocaleAboutImport.update({
  id: '/$locale/about',
  path: '/$locale/about',
  getParentRoute: () => PublicRoute,
} as any)

const PublicLocaleProductsSlugRoute = PublicLocaleProductsSlugImport.update({
  id: '/$locale/products/$slug',
  path: '/$locale/products/$slug',
  getParentRoute: () => PublicRoute,
} as any)

const PublicLocaleCategoriesSlugRoute = PublicLocaleCategoriesSlugImport.update(
  {
    id: '/$locale/categories/$slug',
    path: '/$locale/categories/$slug',
    getParentRoute: () => PublicRoute,
  } as any,
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRoute
    }
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicImport
      parentRoute: typeof rootRoute
    }
    '/admin/dashboard': {
      id: '/admin/dashboard'
      path: '/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof AdminDashboardImport
      parentRoute: typeof AdminRouteImport
    }
    '/_public/': {
      id: '/_public/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PublicIndexImport
      parentRoute: typeof PublicImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexImport
      parentRoute: typeof AdminRouteImport
    }
    '/_public/$locale/about': {
      id: '/_public/$locale/about'
      path: '/$locale/about'
      fullPath: '/$locale/about'
      preLoaderRoute: typeof PublicLocaleAboutImport
      parentRoute: typeof PublicImport
    }
    '/_public/$locale/news': {
      id: '/_public/$locale/news'
      path: '/$locale/news'
      fullPath: '/$locale/news'
      preLoaderRoute: typeof PublicLocaleNewsImport
      parentRoute: typeof PublicImport
    }
    '/_public/$locale/search': {
      id: '/_public/$locale/search'
      path: '/$locale/search'
      fullPath: '/$locale/search'
      preLoaderRoute: typeof PublicLocaleSearchImport
      parentRoute: typeof PublicImport
    }
    '/admin/products/': {
      id: '/admin/products/'
      path: '/products'
      fullPath: '/admin/products'
      preLoaderRoute: typeof AdminProductsIndexImport
      parentRoute: typeof AdminRouteImport
    }
    '/_public/$locale/categories/$slug': {
      id: '/_public/$locale/categories/$slug'
      path: '/$locale/categories/$slug'
      fullPath: '/$locale/categories/$slug'
      preLoaderRoute: typeof PublicLocaleCategoriesSlugImport
      parentRoute: typeof PublicImport
    }
    '/_public/$locale/products/$slug': {
      id: '/_public/$locale/products/$slug'
      path: '/$locale/products/$slug'
      fullPath: '/$locale/products/$slug'
      preLoaderRoute: typeof PublicLocaleProductsSlugImport
      parentRoute: typeof PublicImport
    }
  }
}

// Create and export the route tree

interface AdminRouteRouteChildren {
  AdminDashboardRoute: typeof AdminDashboardRoute
  AdminIndexRoute: typeof AdminIndexRoute
  AdminProductsIndexRoute: typeof AdminProductsIndexRoute
}

const AdminRouteRouteChildren: AdminRouteRouteChildren = {
  AdminDashboardRoute: AdminDashboardRoute,
  AdminIndexRoute: AdminIndexRoute,
  AdminProductsIndexRoute: AdminProductsIndexRoute,
}

const AdminRouteRouteWithChildren = AdminRouteRoute._addFileChildren(
  AdminRouteRouteChildren,
)

interface PublicRouteChildren {
  PublicIndexRoute: typeof PublicIndexRoute
  PublicLocaleAboutRoute: typeof PublicLocaleAboutRoute
  PublicLocaleNewsRoute: typeof PublicLocaleNewsRoute
  PublicLocaleSearchRoute: typeof PublicLocaleSearchRoute
  PublicLocaleCategoriesSlugRoute: typeof PublicLocaleCategoriesSlugRoute
  PublicLocaleProductsSlugRoute: typeof PublicLocaleProductsSlugRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicIndexRoute: PublicIndexRoute,
  PublicLocaleAboutRoute: PublicLocaleAboutRoute,
  PublicLocaleNewsRoute: PublicLocaleNewsRoute,
  PublicLocaleSearchRoute: PublicLocaleSearchRoute,
  PublicLocaleCategoriesSlugRoute: PublicLocaleCategoriesSlugRoute,
  PublicLocaleProductsSlugRoute: PublicLocaleProductsSlugRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

export interface FileRoutesByFullPath {
  '/admin': typeof AdminRouteRouteWithChildren
  '': typeof PublicRouteWithChildren
  '/admin/dashboard': typeof AdminDashboardRoute
  '/': typeof PublicIndexRoute
  '/admin/': typeof AdminIndexRoute
  '/$locale/about': typeof PublicLocaleAboutRoute
  '/$locale/news': typeof PublicLocaleNewsRoute
  '/$locale/search': typeof PublicLocaleSearchRoute
  '/admin/products': typeof AdminProductsIndexRoute
  '/$locale/categories/$slug': typeof PublicLocaleCategoriesSlugRoute
  '/$locale/products/$slug': typeof PublicLocaleProductsSlugRoute
}

export interface FileRoutesByTo {
  '/admin/dashboard': typeof AdminDashboardRoute
  '/': typeof PublicIndexRoute
  '/admin': typeof AdminIndexRoute
  '/$locale/about': typeof PublicLocaleAboutRoute
  '/$locale/news': typeof PublicLocaleNewsRoute
  '/$locale/search': typeof PublicLocaleSearchRoute
  '/admin/products': typeof AdminProductsIndexRoute
  '/$locale/categories/$slug': typeof PublicLocaleCategoriesSlugRoute
  '/$locale/products/$slug': typeof PublicLocaleProductsSlugRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/_public': typeof PublicRouteWithChildren
  '/admin/dashboard': typeof AdminDashboardRoute
  '/_public/': typeof PublicIndexRoute
  '/admin/': typeof AdminIndexRoute
  '/_public/$locale/about': typeof PublicLocaleAboutRoute
  '/_public/$locale/news': typeof PublicLocaleNewsRoute
  '/_public/$locale/search': typeof PublicLocaleSearchRoute
  '/admin/products/': typeof AdminProductsIndexRoute
  '/_public/$locale/categories/$slug': typeof PublicLocaleCategoriesSlugRoute
  '/_public/$locale/products/$slug': typeof PublicLocaleProductsSlugRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/admin'
    | ''
    | '/admin/dashboard'
    | '/'
    | '/admin/'
    | '/$locale/about'
    | '/$locale/news'
    | '/$locale/search'
    | '/admin/products'
    | '/$locale/categories/$slug'
    | '/$locale/products/$slug'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/admin/dashboard'
    | '/'
    | '/admin'
    | '/$locale/about'
    | '/$locale/news'
    | '/$locale/search'
    | '/admin/products'
    | '/$locale/categories/$slug'
    | '/$locale/products/$slug'
  id:
    | '__root__'
    | '/admin'
    | '/_public'
    | '/admin/dashboard'
    | '/_public/'
    | '/admin/'
    | '/_public/$locale/about'
    | '/_public/$locale/news'
    | '/_public/$locale/search'
    | '/admin/products/'
    | '/_public/$locale/categories/$slug'
    | '/_public/$locale/products/$slug'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AdminRouteRoute: typeof AdminRouteRouteWithChildren
  PublicRoute: typeof PublicRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AdminRouteRoute: AdminRouteRouteWithChildren,
  PublicRoute: PublicRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/admin",
        "/_public"
      ]
    },
    "/admin": {
      "filePath": "admin/route.tsx",
      "children": [
        "/admin/dashboard",
        "/admin/",
        "/admin/products/"
      ]
    },
    "/_public": {
      "filePath": "_public.tsx",
      "children": [
        "/_public/",
        "/_public/$locale/about",
        "/_public/$locale/news",
        "/_public/$locale/search",
        "/_public/$locale/categories/$slug",
        "/_public/$locale/products/$slug"
      ]
    },
    "/admin/dashboard": {
      "filePath": "admin/dashboard.tsx",
      "parent": "/admin"
    },
    "/_public/": {
      "filePath": "_public.index.tsx",
      "parent": "/_public"
    },
    "/admin/": {
      "filePath": "admin/index.tsx",
      "parent": "/admin"
    },
    "/_public/$locale/about": {
      "filePath": "_public.$locale.about.tsx",
      "parent": "/_public"
    },
    "/_public/$locale/news": {
      "filePath": "_public.$locale.news.tsx",
      "parent": "/_public"
    },
    "/_public/$locale/search": {
      "filePath": "_public.$locale.search.tsx",
      "parent": "/_public"
    },
    "/admin/products/": {
      "filePath": "admin/products/index.tsx",
      "parent": "/admin"
    },
    "/_public/$locale/categories/$slug": {
      "filePath": "_public.$locale.categories.$slug.tsx",
      "parent": "/_public"
    },
    "/_public/$locale/products/$slug": {
      "filePath": "_public.$locale.products.$slug.tsx",
      "parent": "/_public"
    }
  }
}
ROUTE_MANIFEST_END */
